name: Build & Release

on:
  workflow_dispatch:
  push:
    branches:
      - master
    paths-ignore:
      - 'app/build.gradle'
      - 'app/src/main/AndroidManifest.xml'

jobs:
  build:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PAT }}

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '11'

      - name: Gradle cache
        uses: gradle/gradle-build-action@v2

      - name: Build App
        run: ./gradlew assembleDebug

      - name: Version
        run: |
          # Get the current version and application ID from the build.gradle file
          CURRENT_VERSION=$(grep -oP '(?<=versionName ")[^"]*' app/build.gradle)
          #CURRENT_APP_ID=$(grep -oP '(?<=applicationId ")[^"]*' app/build.gradle)
          #CURRENT_PACKAGE=$(grep -oP '(?<=package=")[^"]*' app/src/main/AndroidManifest.xml)
          echo "Current Version: $CURRENT_VERSION"
          #echo "Current Application ID: $CURRENT_APP_ID"
          #echo "Current Package Name: $CURRENT_PACKAGE"
          
          # Increment the version
          NEW_VERSION=$(echo "$CURRENT_VERSION" | awk -F. -v OFS=. '{$NF++;print}')
          echo "New Version: $NEW_VERSION"
          echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV
          
          #NUMERIC_VERSION=$(echo "$NEW_VERSION" | awk -F. '{for (i=1; i<=NF; i++) { printf "%s", tolower(tolower($i)) } printf "\n" }')
          #ALPHA_VERSION=$(echo "$NUMERIC_VERSION" | sed -E 's/1/one/g; s/2/two/g; s/3/three/g; s/4/four/g; s/5/five/g; s/6/six/g; s/7/seven/g; s/8/eight/g; s/9/nine/g; s/0/zero/g')
          #echo "Numeric Version: $NUMERIC_VERSION"
          #echo "Alpha Version: $ALPHA_VERSION"
          
          # Modify the application ID by appending the new version
          #NEW_APP_ID="com.example.app.${ALPHA_VERSION}"
          #NEW_PACKAGE="com.example.app.${ALPHA_VERSION}"
          #echo "New Application ID: $NEW_APP_ID"
          #echo "New Package Name: $NEW_PACKAGE"
    
          # Update the version and application ID in the build.gradle file
          sed -i "s/versionName \"$CURRENT_VERSION\"/versionName \"$NEW_VERSION\"/" app/build.gradle
          #sed -i "s/applicationId \"$CURRENT_APP_ID\"/applicationId \"$NEW_APP_ID\"/" app/build.gradle
          #sed -i "s/package=\"$CURRENT_PACKAGE\"/package=\"$NEW_PACKAGE\"/" app/src/main/AndroidManifest.xml

          # Commit and push the changes to build.gradle
          git config --global user.name ${{ github.actor }}
          git config --global user.email ${{ github.actor }}@outlook.com
          git add app/build.gradle
          #git add app/src/main/AndroidManifest.xml
          git commit -m "Increment version to $NEW_VERSION"
          git push origin HEAD:master

      - name: Build App
        run: ./gradlew assembleDebug

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        with:
          tag_name: v${{ env.VERSION }}
          release_name: Release ${{ env.VERSION }}
          body: |
            Release ${{ env.VERSION }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: app/build/outputs/apk/debug/app-debug.apk
          asset_name: app-debug-${{ env.VERSION }}.apk
          asset_content_type: application/apk
